/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog, Callback, EventEmitter } from 'web3-core'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { ContractEvent } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class StablecoinConverter extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)
  clone(): StablecoinConverter
  methods: {
    getSecondsRemainingInBatch(): TransactionObject<BN>

    feeDenominator(): TransactionObject<BN>

    getPendingWithdrawAmount(user: string, token: string): TransactionObject<BN>

    requestWithdraw(token: string, amount: number | string): TransactionObject<void>

    getPendingDepositAmount(user: string, token: string): TransactionObject<BN>

    deposit(token: string, amount: number | string): TransactionObject<void>

    getPendingWithdrawBatchNumber(user: string, token: string): TransactionObject<BN>

    TOKEN_ADDITION_FEE_IN_OWL(): TransactionObject<BN>

    feeToken(): TransactionObject<string>

    currentPrices(arg0: number | string): TransactionObject<BN>

    orders(
      arg0: string,
      arg1: number | string,
    ): TransactionObject<{
      buyToken: BN
      sellToken: BN
      validFrom: BN
      validUntil: BN
      priceNumerator: BN
      priceDenominator: BN
      usedAmount: BN
      0: BN
      1: BN
      2: BN
      3: BN
      4: BN
      5: BN
      6: BN
    }>

    numTokens(): TransactionObject<BN>

    lastCreditBatchId(arg0: string, arg1: string): TransactionObject<BN>

    latestSolution(): TransactionObject<{
      batchId: BN
      solutionSubmitter: string
      feeReward: BN
      objectiveValue: BN
      0: BN
      1: string
      2: BN
      3: BN
    }>

    getBalance(user: string, token: string): TransactionObject<BN>

    BATCH_TIME(): TransactionObject<BN>

    getCurrentBatchId(): TransactionObject<BN>

    requestFutureWithdraw(token: string, amount: number | string, batchId: number | string): TransactionObject<void>

    hasValidWithdrawRequest(user: string, token: string): TransactionObject<boolean>

    MAX_TOKENS(): TransactionObject<BN>

    getPendingDepositBatchNumber(user: string, token: string): TransactionObject<BN>

    withdraw(user: string, token: string): TransactionObject<void>

    MAX_TOUCHED_ORDERS(): TransactionObject<BN>

    addToken(token: string): TransactionObject<void>

    placeValidFromOrder(
      buyToken: number | string,
      sellToken: number | string,
      validFrom: number | string,
      validUntil: number | string,
      buyAmount: number | string,
      sellAmount: number | string,
    ): TransactionObject<BN>

    placeOrder(
      buyToken: number | string,
      sellToken: number | string,
      validUntil: number | string,
      buyAmount: number | string,
      sellAmount: number | string,
    ): TransactionObject<BN>

    cancelOrder(id: number | string): TransactionObject<void>

    freeStorageOfOrder(ids: (number | string)[]): TransactionObject<void>

    submitSolution(
      batchIndex: number | string,
      owners: string[],
      orderIds: (number | string)[],
      volumes: (number | string)[],
      prices: (number | string)[],
      tokenIdsForPrice: (number | string)[],
    ): TransactionObject<void>

    tokenAddressToIdMap(addr: string): TransactionObject<BN>

    tokenIdToAddressMap(id: number | string): TransactionObject<string>

    getEncodedAuctionElements(): TransactionObject<string>

    acceptingSolutions(batchIndex: number | string): TransactionObject<boolean>

    getCurrentObjectiveValue(): TransactionObject<BN>
  }
  events: {
    OrderPlacement: ContractEvent<{
      owner: string
      buyToken: BN
      sellToken: BN
      validFrom: BN
      validUntil: BN
      priceNumerator: BN
      priceDenominator: BN
      0: string
      1: BN
      2: BN
      3: BN
      4: BN
      5: BN
      6: BN
    }>
    OrderCancelation: ContractEvent<{
      owner: string
      id: BN
      0: string
      1: BN
    }>
    Deposit: ContractEvent<{
      user: string
      token: string
      amount: BN
      stateIndex: BN
      0: string
      1: string
      2: BN
      3: BN
    }>
    WithdrawRequest: ContractEvent<{
      user: string
      token: string
      amount: BN
      stateIndex: BN
      0: string
      1: string
      2: BN
      3: BN
    }>
    Withdraw: ContractEvent<{
      user: string
      token: string
      amount: BN
      0: string
      1: string
      2: BN
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
